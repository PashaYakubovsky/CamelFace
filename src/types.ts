export interface TravelBlogPost {
	id: number;
	title: string;
	author: {
		name: string;
		email: string;
		avatarUrl: string;
		phone: string;
	};
	content: {
		tags: string[];
		images: string[];
		location: string;
		date: string;
	};
}

/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Post {
	id: string;
	backgroundImage: string | Media;
	video: string | Media;
	title?: string;
	author: string | User;
	country: string | Country;
	publishedDate?: string;
	featured?: boolean;
	content?: string;
	category?: string | Category;
	status?: 'draft' | 'published';
	updatedAt: string;
	createdAt: string;
	textColor: string;
	backgroundColor: string;
	slug: string;
}
export interface Media {
	id: string;
	prefix?: string;
	updatedAt: string;
	createdAt: string;
	url?: string;
	filename?: string;
	mimeType?: string;
	filesize?: number;
	width?: number;
	height?: number;
}
export interface User {
	id: string;
	username?: string;
	email?: string;
	fullname?: string;
	bio?: string;
	isDeleted?: string;
}
export interface Country {
	id: string;
	name: string;
	image?: string | Media;
	updatedAt: string;
	createdAt: string;
}
export interface Category {
	id: string;
	name: string;
	updatedAt: string;
	createdAt: string;
}
export interface AdminUser {
	id: string;
	name?: string;
	adminAvatar?: string | Media;
	active?: boolean;
	role: 'admin';
	fullname?: string;
	updatedAt: string;
	createdAt: string;
	email?: string;
	resetPasswordToken?: string;
	resetPasswordExpiration?: string;
	loginAttempts?: number;
	lockUntil?: string;
	password?: string;
}
export interface Comment {
	id: string;
	comment: string;
	author: string | User;
	post: string | Post;
	publishedDate?: string;
	date?: string;
	updatedAt: string;
	createdAt: string;
}

export interface PayloadCMSResponse<T = object> {
	docs: T;
	totalDocs: number;
	limit: number;
	totalPages: number;
	page: number;
	pagingCounter: number;
	hasPrevPage: boolean;
	hasNextPage: boolean;
	prevPage: null;
	nextPage: null;
}
